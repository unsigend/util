/**
 * MIT License
 * 
 * Copyright (c) 2025 QIU YIXIANG
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef UTEST_H
#define UTEST_H

/**
 * The Utest flag is used to control the behavior of the utest library.
 * The default value is UTEST_FLAG_DEFAULT.
 * You can set the flag to UTEST_FLAG_NONE to disable all features
 * through the UTEST_SET_FLAGS macro.
 */
#define UTEST_FLAG_NONE
#define UTEST_FLAG_SHOW_CASE
#define UTEST_FLAG_SHOW_SUITE
#define UTEST_FLAG_DEFAULT


#include <utest/utest_internals.h>

/* core macros */
#define UTEST_TEST_CASE(TEST_CASE_NAME)                 _UTEST_TEST_CASE(TEST_CASE_NAME)
#define UTEST_RUN_TEST_CASE(TEST_CASE_NAME)             _UTEST_RUN_TEST_CASE(TEST_CASE_NAME)
#define UTEST_TEST_SUITE(TEST_SUITE_NAME)               _UTEST_TEST_SUITE(TEST_SUITE_NAME)
#define UTEST_RUN_TEST_SUITE(TEST_SUITE_NAME)           _UTEST_RUN_TEST_SUITE(TEST_SUITE_NAME)
#define UTEST_BEGIN()                                   _UTEST_BEGIN()
#define UTEST_END()                                     _UTEST_END()
#define UTEST_SET_FLAG(UTEST_FLAG)                      _UTEST_SET_FLAG(UTEST_FLAG)

/* integer equal */
#define EXPECT_EQUAL_INT(EXPECTED, ACTUAL)
#define EXPECT_EQUAL_INT8(EXPECTED, ACTUAL)
#define EXPECT_EQUAL_INT16(EXPECTED, ACTUAL)
#define EXPECT_EQUAL_INT32(EXPECTED, ACTUAL)
#define EXPECT_EQUAL_INT64(EXPECTED, ACTUAL)
/* integer not equal */
#define EXPECT_NOT_EQUAL_INT(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_INT8(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_INT16(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_INT32(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_INT64(EXPECTED, ACTUAL)
/* integer greater than */
#define EXPECT_GREATER_INT(EXPECTED, ACTUAL)
#define EXPECT_GREATER_INT8(EXPECTED, ACTUAL)
#define EXPECT_GREATER_INT16(EXPECTED, ACTUAL)
#define EXPECT_GREATER_INT32(EXPECTED, ACTUAL)
#define EXPECT_GREATER_INT64(EXPECTED, ACTUAL)
/* integer greater than or equal to */
#define EXPECT_GREATER_EQUAL_INT(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_INT8(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_INT16(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_INT32(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_INT64(EXPECTED, ACTUAL)
/* integer less than */
#define EXPECT_LESS_INT(EXPECTED, ACTUAL)
#define EXPECT_LESS_INT8(EXPECTED, ACTUAL)
#define EXPECT_LESS_INT16(EXPECTED, ACTUAL)
#define EXPECT_LESS_INT32(EXPECTED, ACTUAL)
#define EXPECT_LESS_INT64(EXPECTED, ACTUAL)
/* integer less than or equal to */
#define EXPECT_LESS_EQUAL_INT(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_INT8(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_INT16(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_INT32(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_INT64(EXPECTED, ACTUAL)



/* unsigned integer equal */
#define EXPECT_EQUAL_UINT(EXPECTED, ACTUAL)
#define EXPECT_EQUAL_UINT8(EXPECTED, ACTUAL)
#define EXPECT_EQUAL_UINT16(EXPECTED, ACTUAL)
#define EXPECT_EQUAL_UINT32(EXPECTED, ACTUAL)
#define EXPECT_EQUAL_UINT64(EXPECTED, ACTUAL)
/* unsigned integer not equal */
#define EXPECT_NOT_EQUAL_UINT(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_UINT8(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_UINT16(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_UINT32(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_UINT64(EXPECTED, ACTUAL)
/* unsigned integer greater than */
#define EXPECT_GREATER_UINT(EXPECTED, ACTUAL)
#define EXPECT_GREATER_UINT8(EXPECTED, ACTUAL)
#define EXPECT_GREATER_UINT16(EXPECTED, ACTUAL)
#define EXPECT_GREATER_UINT32(EXPECTED, ACTUAL)
#define EXPECT_GREATER_UINT64(EXPECTED, ACTUAL)
/* unsigned integer greater than or equal to */
#define EXPECT_GREATER_EQUAL_UINT(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_UINT8(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_UINT16(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_UINT32(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_UINT64(EXPECTED, ACTUAL)
/* unsigned integer less than */
#define EXPECT_LESS_UINT(EXPECTED, ACTUAL)
#define EXPECT_LESS_UINT8(EXPECTED, ACTUAL)
#define EXPECT_LESS_UINT16(EXPECTED, ACTUAL)
#define EXPECT_LESS_UINT32(EXPECTED, ACTUAL)
#define EXPECT_LESS_UINT64(EXPECTED, ACTUAL)
/* unsigned integer less than or equal to */
#define EXPECT_LESS_EQUAL_UINT(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_UINT8(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_UINT16(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_UINT32(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_UINT64(EXPECTED, ACTUAL)


/* float assertion */
#define EXPECT_EQUAL_FLOAT(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_FLOAT(EXPECTED, ACTUAL)
#define EXPECT_GREATER_FLOAT(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_FLOAT(EXPECTED, ACTUAL)
#define EXPECT_LESS_FLOAT(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_FLOAT(EXPECTED, ACTUAL)

/* double assertion */
#define EXPECT_EQUAL_DOUBLE(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_DOUBLE(EXPECTED, ACTUAL)
#define EXPECT_GREATER_DOUBLE(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_DOUBLE(EXPECTED, ACTUAL)
#define EXPECT_LESS_DOUBLE(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_DOUBLE(EXPECTED, ACTUAL)

/* string assertion */
#define EXPECT_EQUAL_STRING(EXPECTED, ACTUAL)
#define EXPECT_NOT_EQUAL_STRING(EXPECTED, ACTUAL)
#define EXPECT_GREATER_STRING(EXPECTED, ACTUAL)
#define EXPECT_GREATER_EQUAL_STRING(EXPECTED, ACTUAL)
#define EXPECT_LESS_STRING(EXPECTED, ACTUAL)
#define EXPECT_LESS_EQUAL_STRING(EXPECTED, ACTUAL)

/* pointer assertion */
#define UTEST_EXPECT_NULL(POINTER)
#define UTEST_EXPECT_NOT_NULL(POINTER)

/* boolean expression */
#define EXPECT_TRUE(EXPRESSION)
#define EXPECT_FALSE(EXPRESSION)


#endif